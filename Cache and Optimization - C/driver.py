#!/usr//bin/python
#
# driver.py - The driver tests the correctness of the student's cache
#     simulator. It uses ./test-csim to check the correctness of the
#     simulator.
#
import subprocess;
import re;
import os;
import sys;
import optparse;
from correct import assertProgramCorrect

#
# computeMissScore - compute the score depending on the number of
# cache misses
#
def computeMissScore(miss, lower, upper, full_score):
    if miss <= lower:
        return full_score
    if miss >= upper: 
        return 0

    score = (miss - lower) * 1.0 
    range = (upper- lower) * 1.0
    return round((1 - score / range) * full_score, 1)

# Convert simulated CEST to a score
def computeOptScore(cest,maxScore):
    # Extra credit fixup
    ec_cutoff = 759000
    #sample scores generated by solutions
    buckets = [1244182, 1250148, 1270489, 1276511, 1293877, 1300208, 1318739,
               1324735, 1345046, 1347924, 1350992, 1353831, 3028928, 3034885,
               3079101, 3085048, 22787827, 22793823, 22814134, 22820080,
               22837446, 22843743, 22862291, 22868313, 22888574, 22891479,
               22894590, 22897426, 24567156, 24573393, 24617973, 24623635]
    if (cest <= ec_cutoff):
        return maxScore + 10
    if (cest < buckets[0]):
        return int(maxScore + 10 * (1.0 - 1.0 * (cest - ec_cutoff) / (buckets[0] - ec_cutoff)))
    n = len(buckets)
    i = 0
    for b in buckets:
        if (cest <= b):
            break
        i = i + 1
    ratio = 1.0 * (n - i) / n
    return int(maxScore * ratio)

#
# main - Main function
#
def main():

    # Configure maxscores here
    maxscore= {};
    maxscore['csim'] = 45
    maxscore['opt'] = 55

    # Parse the command line arguments
    p = optparse.OptionParser()
    p.add_option("-A", action="store_true", dest="autograde",
                 help="emit autoresult string for Autolab");
    opts, args = p.parse_args()
    autograde = opts.autograde

    #
    # Part A: Cache Simulator
    #
    # Check the correctness of the cache simulator
    print "Part A: Testing cache simulator"
    print "Running ./test-csim"
    p = subprocess.Popen("./test-csim", shell=True, stdout=subprocess.PIPE)
    stdout_data = p.communicate()[0]

    # Emit the output from test-csim
    stdout_data = re.split('\n', stdout_data)
    for line in stdout_data:
        if re.match("TEST_CSIM_RESULTS", line):
            resultsim = re.findall(r'(\d+)', line)
        else:
            print "%s" % (line)

    #
    # Part B: Optimization
    #
    print "Part B: Testing program optimization"

    # Correctness
    print "Testing "+program+" output for correctness..."
    if (assertProgramCorrect(program, "output.txt")):
        correct = 1
    else:
        correct = 0

    # Peformance
    print "Running "+program+" through valgrind and computing cycles..."
    cmd = "./compute_performance.sh "+program
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    (stdout_data, stdout_err) = p.communicate()
    cest = int(stdout_data.split()[0])
    performance_score = computeOptScore(cest, maxscore['opt'])

    # Summary
    print "  %-22s %d" %("Correct", correct)
    print "  %-22s %d" %("CEST", cest)
    print "  %-22s %d" %("Performance Points", performance_score)

    # Compute the scores for each step
    csim_cscore  = map(int, resultsim[0:1])
    optimize_score = correct * performance_score
    total_score = csim_cscore[0] + optimize_score

    # Summarize the results
    print "\nCache Lab summary:"
    print "%-22s%8s%10s%12s" % ("", "Points", "Max pts", "Misses")
    print "%-22s%8.1f%10d" % ("Csim correctness", csim_cscore[0],
                              maxscore['csim'])
    print "%-22s%8.1f%10d" % ("Optimize performance", optimize_score,
                              maxscore['opt'])
    print "\n%22s%8.1f%10d" % ("Total points", total_score,
                             maxscore['csim'] + maxscore['opt'])

    # Emit autoresult string for Autolab if called with -A option
    if autograde:
        autoresult="%.1f" % (total_score)
        print "\nAUTORESULT_STRING=%s" % autoresult

# execute main only if called as a script
if __name__ == "__main__":
    if (len(sys.argv) >= 2):
        program = sys.argv[1]
    else:
        program = "encoder"
    main()
